version: 2.1

executors:
  cpp-executor:
    docker:
      - image: ubuntu:latest
    environment:
      CC: clang
      CXX: clang++
      PATH: "/usr/local/bin:/usr/bin:/bin"

jobs:
  setup:
    executor: cpp-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update && apt install -y \
              clang \
              clang-tidy \
              clang-format \
              gcovr \
              lcov \
              ninja-build \
              cmake \
              curl \
              unzip \
              tar \
              git \
              python3
      - run:
          name: Install vcpkg
          command: |
            git clone https://github.com/microsoft/vcpkg.git
            ./vcpkg/bootstrap-vcpkg.sh
            ./vcpkg/vcpkg integrate install
      - persist_to_workspace:
          root: .
          paths:
            - vcpkg

  build:
    executor: cpp-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install project dependencies
          command: |
            ./vcpkg/vcpkg install gtest
      - run:
          name: Configure CMake
          command: |
            cmake -B build -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_CXX_COMPILER=clang++
      - run:
          name: Build
          command: cmake --build build
      - persist_to_workspace:
          root: .
          paths:
            - build

  test:
    executor: cpp-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run tests
          command: ctest --test-dir build --output-on-failure

  lint:
    executor: cpp-executor
    steps:
      - checkout
      - run:
          name: Run Clang-Format
          command: find . -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror
      - run:
          name: Run Clang-Tidy
          command: clang-tidy -p build -checks='*' src/*.cpp

  coverage:
    executor: cpp-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Generate Coverage
          command: |
            gcovr -r . --html --html-details -o coverage.html
      - store_artifacts:
          path: coverage.html
          destination: coverage

workflows:
  version: 2
  cpp_pipeline:
    jobs:
      - setup
      - build:
          requires:
            - setup
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - coverage:
          requires:
            - test
